<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>The Chess Arena Pi</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body {
      background: #0f111a;
      color: #f0f0f5;
      font-family: system-ui,-apple-system,BlinkMacSystemFont,sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      gap: 16px;
    }
    .top-bar {
      display: flex;
      gap: 20px;
      margin-top: 32px;
      flex-wrap: wrap;
      justify-content: center;
      align-items: center;
    }
    button {
      background: #1f2435;
      border: none;
      padding: 12px 20px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 1rem;
      color: #fff;
      box-shadow: 0 10px 25px -5px rgba(0,0,0,0.5);
      transition: transform .15s;
    }
    button:hover { transform: scale(1.03); }
    button:active { transform: scale(.98); }
    #board-display {
      background: #1f2435;
      padding: 12px;
      border-radius: 10px;
      max-width: 400px;
      overflow: auto;
      line-height: 1.1;
    }
    .status {
      margin-bottom: 8px;
      font-weight: 600;
    }
    .note {
      font-size: .85rem;
      opacity: .8;
    }
    .card {
      background: #1f2435;
      padding: 14px 18px;
      border-radius: 14px;
      box-shadow: 0 20px 40px -10px rgba(0,0,0,0.5);
    }
  </style>
</head>
<body>

  <h1 style="margin-top:24px;">The Chess Arena Pi</h1>

  <!-- include offline AI logic -->
  <script src="offline-ai.js" defer></script>

  <!-- login + offline side by side -->
  <div class="top-bar">
    <div class="card">
      <!-- Pi login placeholder -->
      <div style="display:flex; flex-direction:column; gap:6px; align-items:center;">
        <button id="pi-login-btn">Login with Pi</button>
        <div class="note">Online mode: leaderboards, sync, multiplayer.</div>
      </div>
    </div>

    <div class="card">
      <!-- Offline mode -->
      <div style="display:flex; flex-direction:column; gap:6px; align-items:center;">
        <button id="offline-btn">Play vs AI (Offline)</button>
        <div class="note">No login needed. Rating stored locally.</div>
      </div>
    </div>
  </div>

  <!-- board and status -->
  <div class="card" style="width:100%; max-width:500px; text-align:center;">
    <div id="ai-status" class="status">Press "Play vs AI (Offline)" to start.</div>
    <pre id="board-display" style="font-family:monospace; margin:0;">Loading...</pre>
    <div class="note" style="margin-top:8px;">
      Keyboard shortcuts: press <strong>m</strong> to input move (like e2e4), <strong>r</strong> to see offline rating.
    </div>
  </div>

  <!-- offline AI hookup -->
  <script>
    function renderBoard(board) {
      let s = '';
      for (let r = 0; r < 8; r++) {
        s += board[r].join(' ') + '\n';
      }
      document.getElementById('board-display').textContent = s;
    }

    let game = null;

    document.getElementById('offline-btn').addEventListener('click', async () => {
      document.getElementById('ai-status').textContent = 'Starting offline game vs AI...';
      game = window.OfflineAI.startNewGame(
        (board, whiteToMove) => {
          renderBoard(board);
          document.getElementById('ai-status').textContent = whiteToMove ? 'White to move' : 'Black to move';
        },
        (aiMoveStr, board, whiteToMove) => {
          renderBoard(board);
          document.getElementById('ai-status').textContent =
            'AI played ' + aiMoveStr + '. ' + (whiteToMove ? 'White to move' : 'Black to move');
        },
        { difficulty: 2, white: true }
      );
    });

    document.addEventListener('keydown', async (e) => {
      if (!game) return;
      if (e.key === 'm') {
        const move = prompt('Enter move like e2e4');
        if (!move) return;
        const ok = game.userMove(move);
        if (!ok) {
          alert('Illegal move');
          return;
        }
        renderBoard(game.boardState());
        await game.aiRespond();
      }
      if (e.key === 'r') {
        const rating = game.getRating();
        alert('Offline rating: ' + rating.rating + ' over ' + rating.games + ' games');
      }
    });

    // stub for Pi login (replace with real integration)
    document.getElementById('pi-login-btn').addEventListener('click', () => {
      alert('Pi login flow placeholder. Integrate Pi SDK here.');
    });
  </script>

</body>
</html>
